<!-- Start of Facebook Login -->
<!-- <div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
  FB.init({
    appId      : 'YOUR_APP_ID', // App ID
    channelUrl : '//WWW.YOUR_DOMAIN.COM/channel.html', // Channel File
    status     : true, // check login status
    cookie     : true, // enable cookies to allow the server to access the session
    xfbml      : true  // parse XFBML
  });

  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
  // for any authentication related change, such as login, logout or session refresh. This means that
  // whenever someone who was previously logged out tries to log in again, the correct case below 
  // will be handled. 
  FB.Event.subscribe('auth.authResponseChange', function(response) {
    // Here we specify what we do with the response anytime this event occurs. 
    if (response.status === 'connected') {
      // The response object is returned with a status field that lets the app know the current
      // login status of the person. In this case, we're handling the situation where they 
      // have logged in to the app.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // In this case, the person is logged into Facebook, but not into the app, so we call
      // FB.login() to prompt them to do so. 
      // In real-life usage, you wouldn't want to immediately prompt someone to login 
      // like this, for two reasons:
      // (1) JavaScript created popup windows are blocked by most browsers unless they 
      // result from direct interaction from people using the app (such as a mouse click)
      // (2) it is a bad experience to be continually prompted to login upon page load.
      FB.login();
    } else {
      // In this case, the person is not logged into Facebook, so we call the login() 
      // function to prompt them to do so. Note that at this stage there is no indication
      // of whether they are logged into the app. If they aren't then they'll see the Login
      // dialog right after they log in to Facebook. 
      // The same caveats as above apply to the FB.login() call here.
      FB.login();
    }
  });
  };

  // Load the SDK asynchronously
  (function(d){
   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
   if (d.getElementById(id)) {return;}
   js = d.createElement('script'); js.id = id; js.async = true;
   js.src = "//connect.facebook.net/en_US/all.js";
   ref.parentNode.insertBefore(js, ref);
  }(document));

  // Here we run a very simple test of the Graph API after login is successful. 
  // This testAPI() function is only called in those cases. 
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Good to see you, ' + response.name + '.');
    });
  }
</script>

<!--
  Below we include the Login Button social plugin. This button uses the JavaScript SDK to
  present a graphical Login button that triggers the FB.login() function when clicked.

  Learn more about options for the login button plugin:
  /docs/reference/plugins/login/ -->

<!-- <fb:login-button show-faces="true" width="200" max-rows="1"></fb:login-button> -->
<!-- End of Facebook Login -->

<div id="header">Choose Your Own Adventure</div>

<div class="main">

<p><span class="frist_letter"><%= @adventure.story.first %></span><%= @adventure.story[1..-1] %><%= hidden_field_tag :adventure_id, @adventure.id %></p>
<!-- make hidden field to get the current adventure_id -->
<%= image_tag @adventure.photo.url %>
<br/><br/>
<% if @adventure.question_1.present? && @adventure.question_2.present? %>
<!-- apply if condition for radio button not shown if there is no questions -->
	<% if @adventure_id == 2 %>
  		<input type="radio" name="decision" value=1 id="q-1"><%= @adventure.question_1 %><br/>
  		<input type="radio" name="decision" value=2 id="q-2"><%= @adventure.question_2 %><br/>
  	<% else %>
  		<% story_id = @adventure.id_of_story %>
  		<% if story_id == 1 || story_id == 2 %>
  			<% left_radio_btn = story_id.to_f.to_s.succ %>
  			<% right_radio_btn = left_radio_btn.succ %>
<!-- assign the value to left radio button and right radio button if we are at first level of tree -->  	
  		<% else %>
  			<%= tree_level = story_id.to_s.split('.').last.size %> <!-- here i get the level of tree  -->
  			<%= devided_factor = 1 / (10 ** (tree_level + 1)).to_f %>  <!-- make formula to get 1.1 or 1.2 -->
  			<% left_radio_btn = story_id + devided_factor %>
  			<% right_radio_btn = left_radio_btn + devided_factor  %>
  			<% right_radio_btn = right_radio_btn.round(tree_level+2)%> <!-- round the decimal part -->
<!-- assign the value to left radio button and right radio button if we are at different level of tree -->   			
  		<% end %>
  		<input type="radio" name="decision" value=<%= left_radio_btn %> class="questions"><%= @adventure.question_1 %><br/>
  		<input type="radio" name="decision" value=<%= right_radio_btn %> class="questions"><%= @adventure.question_2 %><br/>
  	<% end%>				
<% end %>  
<%= @adventure.outcome if @adventure.outcome %>
</div>  
  <button id="submit_button">Continue</button>
<script>
$(document).ready(function () {
	$("#submit_button").click(function (){
	    var decision_value = $('input:radio[name=decision]:checked').val();    // Get value of selected radio button
 		var theId = $('#adventure_id').val();  // Get the value of hidden field in which i store current adventure id
		var theURL = '/ajax_record/' + (parseInt(theId) + 1)+'?decision='+ decision_value ; // call to ajax function which i have made in adventure_controller
		$.ajax({
          url: theURL // ajax call here
        });  
	});
});
</script>
